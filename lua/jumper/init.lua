-- default configuration
local M = {}
local config = {
    jumper_files = os.getenv("__JUMPER_FILES"),
    jumper_directories = os.getenv("__JUMPER_FOLDERS"),
    jumper_max_results = 150,
    jumper_max_completion_results = 12,
}

-- override default config
M.set_preferences = function(opts)
    for k, v in pairs(opts) do
        config[k] = v
    end
end

-- make jumper's command
M.make_command = function(database_file, max_results, colors, prompt)
    local cmd = { "jumper", "-f", database_file }
    if max_results ~= nil then
        table.insert(cmd, "-n")
        table.insert(cmd, max_results)
    end
    if colors then
        table.insert(cmd, "-c")
    end
    if prompt ~= nil then
        table.insert(cmd, prompt)
    end
    return cmd
end

-- update the files' database
local function update_database(database_file, filename, weight)
    -- exclude git files and filenames with ':' (often temporay buffers generated by plugins)
    if not (string.find(filename, "/.git/") or string.find(filename, ":")) then
        local cmd = "jumper -f " .. database_file .. " -w" .. weight .. " -a '" .. filename .. "'"
        os.execute(cmd)
    end
end

-- Update database whenever a file is opened
vim.api.nvim_create_autocmd({ "BufNewFile", "BufReadPre" }, {
    pattern = { "*" },
    callback = function(ev)
        local filename = vim.api.nvim_buf_get_name(ev.buf)
        update_database(config.jumper_files, filename, 1.0)
    end
})

-- Update database whenever a file is modified
vim.api.nvim_create_autocmd({ "BufWritePre" }, {
    pattern = { "*" },
    callback = function(ev)
        local buf_modified = vim.api.nvim_buf_get_option(ev.buf, 'modified')
        if buf_modified then
            local filename = vim.api.nvim_buf_get_name(ev.buf)
            update_database(config.jumper_files, filename, 0.3)
        end
    end
})

-- Update database whenever a current directory has changed
vim.api.nvim_create_autocmd({ "DirChanged" }, {
    pattern = { "*" },
    callback = function()
        update_database(config.jumper_directories, vim.loop.cwd(), 1.0)
    end
})

local function make_completion_function(database_file, max_results)
    return function(prompt, _, _)
        local cmd = M.make_command(database_file, max_results, false, prompt)
        return vim.fn.systemlist(cmd)
    end
end

local function z(opts)
    local cmd = M.make_command(config.jumper_directories, 1, false, opts.args)
    local dir = vim.fn.systemlist(cmd)
    if dir[1] then
        vim.cmd("cd " .. dir[1])
        vim.print(dir[1])
    else
        vim.print("No match found.")
    end
end

local function zf(opts)
    local cmd = M.make_command(config.jumper_files, 1, false, opts.args)
    local dir = vim.fn.systemlist(cmd)
    if dir[1] then
        vim.cmd("edit " .. dir[1])
    else
        vim.print("No match found.")
    end
end

-- Functions to jump from the command line:
vim.api.nvim_create_user_command('Z', z,
    {
        nargs = '+',
        complete = make_completion_function(config.jumper_directories, config.jumper_max_completion_results)
    })
vim.api.nvim_create_user_command('Zf', zf,
    {
        nargs = '+',
        complete = make_completion_function(config.jumper_files, config.jumper_max_completion_results)
    })

M.config = config
return M
